@using Microsoft.AspNetCore.Authorization
@using AppService
@using Newtonsoft.Json.Linq
@attribute [Authorize]
@page "/alarm"
@inject IAlarmClient AlarmClient
@inject IAlarmNotificationClient AlarmNotificationClient
@implements IDisposable

<h1>Alarm</h1>

@if (configuration == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="form">
    <div class="form-group">
        @if (isArmed)
        {
            <button class="btn btn-primary" @onclick="@(async () => await AlarmClient.DisarmAsync(DeviceId))">Disarm</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="@(async () => await AlarmClient.ArmAsync(DeviceId))">Arm</button>
        }
    </div>

    <h2 class="mt-2">Configuration</h2>

    <div class="form-group">
        <label for="customRange1">Access Time</label>
        <input type="range" class="custom-range" id="customRange1" min="0" max="1500" value="@slider" @onchange=@(async (ev) => slider = int.Parse(ev.Value.ToString())) />

        @TimeSpan.FromSeconds(slider)
    </div>

    <div class="form-group">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="@configuration.LockOnClose" id="defaultCheck1">
            <label class="form-check-label" for="defaultCheck1">
                Lock on close
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="@configuration.ArmOnClose" id="defaultCheck2">
            <label class="form-check-label" for="defaultCheck2">
                Arm on close
            </label>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="@Configure">Configure</button>
</div>
}

@code {
    private const string DeviceId = "AccessPoint1";

    AlarmConfiguration configuration = null;
    IDisposable subscription = null;
    string state;
    int slider;
    bool isArmed;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            GetConfiguration(),
            GetAlarmState());

        slider = (int)configuration.AccessTime.TotalSeconds;

        subscription = this.AlarmNotificationClient.WhenMessageReceived.Subscribe(notification =>
        {
            var obj = JObject.Parse(notification.Title);
            if (obj.Value<string>("Event") == "AlarmEvent")
            {
                var alarmState = obj.Value<string>("AlarmState");
                SetState((AlarmState)Enum.Parse(typeof(AlarmState), alarmState));
            }
        });

        await AlarmNotificationClient.StartAsync();
    }

    private async Task GetAlarmState()
    {
        var stateResult = await AlarmClient.GetStateAsync(DeviceId);
        SetState(stateResult.AlarmState);
    }

    private async Task GetConfiguration()
    {
        configuration = await AlarmClient.GetConfigurationAsync(DeviceId);
    }

    private void SetState(AlarmState alarmState)
    {
        switch (alarmState)
        {
            case AlarmState.Armed:
                isArmed = true;
                break;

            case AlarmState.Disarmed:
                isArmed = false;
                break;
        }

        StateHasChanged();
    }

    public async Task Configure()
    {
        await AlarmClient.ConfigureAsync(DeviceId, new SetAlarmConfigurationCommand()
        {
            DeviceId = DeviceId,
            AccessTime = TimeSpan.FromSeconds(slider),
            LockOnClose = configuration.LockOnClose,
            ArmOnClose = configuration.ArmOnClose
        });
    }

    public async void Dispose()
    {
        subscription.Dispose();
        await AlarmNotificationClient.StopAsync();
    }
}
