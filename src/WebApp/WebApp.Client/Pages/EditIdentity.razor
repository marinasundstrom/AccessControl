@attribute [Authorize]
@page "/identities/{id}"
@using Microsoft.AspNetCore.Authorization
@using AppService
@inject IIdentitiesClient IdentitiesClient
@inject NavigationManager NavigationManager

<h1>Edit identity</h1>

<p>Enter information.</p>

@if (Identity != null)
{
    <div>
        <div class="form-group">
            <label for="Name">Name</label>
            <input type="text" class="form-control" id="Name" aria-describedby="NameHelp" placeholder="Name" @bind="@Identity.Name" />
            <small id="NameHelp" class="form-text text-muted">Enter a name for this identity.</small>
        </div>
        
        <div>
            <button class="btn btn-primary" @onclick="@OnCreateButtonClicked">Create</button>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>ID</th>
            </tr>
        </thead>
        <tbody>
            @if (credentials != null)
            {
                @foreach (var identity in credentials)
                {
                    <tr>
                        <td>@identity.CardType</td>
                        <td>@string.Join(",", identity.Data)</td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div>
        <div class="form-group">
            <label for="Name">Card No</label>
            <div class="input-group">
                <input type="text" class="form-control" id="CardNo" aria-describedby="CardNoHelp" placeholder="Card No" @bind="@CardNo" />
            </div>
            <small id="CardNoHelp" class="form-text text-muted">Enter an card number for this identity.</small>

        </div>
        <button class="btn btn-primary" @onclick="@OnAddCredentialClicked">Add Credential</button>
    </div>
}



@functions {
    [Parameter]
    public string Id { get; set; }

    List<CardCredential> credentials;
    Identity Identity { get; set; }

    string CardNo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Identity = await IdentitiesClient.GetAsync(Guid.Parse(Id));
        credentials = (await IdentitiesClient.GetCredentialsAsync(Guid.Parse(Id))).ToList();
        StateHasChanged();
    }

    protected async Task OnCreateButtonClicked()
    {
        try
        {
            await IdentitiesClient.PutAsync(Guid.Parse(Id), Identity);
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc);
        }
        // NavigationManager.NavigateTo("/identities");
    }

    protected async Task OnAddCredentialClicked()
    {
        var credential = new CardCredential()
        {
            Data = CardNo
            .Split(',')
            .Select(x => x.Trim())
            .Select(x => byte.Parse(x))
            .ToArray()
        };
        credentials.Add(credential);
        CardNo = null;

        await IdentitiesClient.AddCredentialAsync(Guid.Parse(Id), credential);
    }
}