@page "/Login"
@layout ContentLayout
@using System.ComponentModel.DataAnnotations
@using WebApp.Client.Utils
@inject NavigationManager NavigationManager
@inject ITokenClient TokenClient
@inject TokenAuthenticationStateProvider AuthStateProvider

<div class="sigin-container text-center">

    <EditForm Model="@credentials" OnValidSubmit="@SubmitCredentials" class="form-signin">

        <span class="oi oi-lock-locked"></span>

        <h1 class="h3 mb-3 font-weight-normal">Please log in</h1>
        <DataAnnotationsValidator />

        <div class="form-floating mb-3">
            <InputText class="form-control" id="floatingInput" placeholder="Email address" @bind-Value="@credentials.Email"></InputText>
            <label for="floatingInput">Email address</label>
            <ValidationMessage For="@(() => credentials.Email)"></ValidationMessage>
        </div>
        <div class="form-floating">
            <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind="@credentials.Password" />
            <label for="floatingPassword">Password</label>
            <ValidationMessage For="@(() => credentials.Password)"></ValidationMessage> 
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-lg btn-primary btn-block">Log in</button>
            <a class="btn btn-lg btn-secondary btn-block ml-2" href="/register">Register</a>
        </div>

        <p class="mt-5 mb-3 text-muted">© @DateTime.Now.Year</p>
    </EditForm>

</div>

@code {
    FormCredentials credentials = new FormCredentials();

    async Task SubmitCredentials()
    {
        try
        {
            var response = await TokenClient.AuthAsync(credentials.Email, credentials.Password);

            await AuthStateProvider.SetTokenAsync(response.Token);

            NavigationManager.NavigateTo("/");
        }
        catch
        {
            credentials = new FormCredentials();
        }
    }

    class FormCredentials
    {
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}
